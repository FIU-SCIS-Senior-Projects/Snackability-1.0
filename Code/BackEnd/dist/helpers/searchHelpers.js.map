{"version":3,"sources":["../../server/helpers/searchHelpers.js"],"names":["baseSearch","snackSearchNdbno","api_key","key","snack","Promise","resolve","reject","SEARCH_URL","SEARCH_URL_SR","get","then","data","response","list","item","response2","final_data","concat","console","log","catch","err","ndbno","url2","nutriSearch","nutrients","nutrient","x","length","name","measures","value","getGrams","eqv","foods","food","ing","ingredients","desc","calories","sodium","totalFat","transFat","saturatedFat","sugar","cholesterol","protein","fiber","carbs","portion"],"mappings":"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","file":"searchHelpers.js","sourcesContent":["import axios from 'axios';\nimport key from '../config/key.js';\n\nconst api_key = key.key;\n\nexport function baseSearch(snack) {\n    return new Promise((resolve, reject) => {\n\n        //first targets branded food products\n        const SEARCH_URL =\n            `https://api.nal.usda.gov/ndb/search/?format=json&DS=SR&q=${snack}&sort=n&max=10&offset=0&api_key=${api_key}`;\n        //targets the standard reffernce api\n        const SEARCH_URL_SR =\n            `https://api.nal.usda.gov/ndb/search/?format=json&ds=Standard%20Reference&q=${snack}&max=5&offset=0&api_key=${api_key}`;\n\n        if (!snack) {\n            reject();\n        }\n\n        axios.get(SEARCH_URL)\n            .then(response => {\n                let data = response.data.list.item;\n                axios.get(SEARCH_URL_SR).then(response2 => {\n                    if (response2.data.list) {\n                        const final_data = (response2.data.list.item).concat(data);\n                        console.log(final_data)\n                        resolve(final_data);\n                    }\n                    resolve(data);\n                }).catch((err) => {\n                    reject(err);\n                })\n\n            }).catch(err => {\n                reject(err);\n            })\n    });\n}\n\nexport function snackSearchNdbno(ndbno) {\n\n    return new Promise((resolve, reject) => {\n\n        const key = 'uzjbjZNFbAkQCtmitGtNGO7xR2O5or032fyxUMzF';\n        const url2 = `https://api.nal.usda.gov/ndb/V2/reports?ndbno=${ndbno}&type=b&format=JSON&api_key=${api_key}`\n\n        const nutriSearch = (nutrients, nutrient) => {\n            for (let x = 0; x < nutrients.length; x++) {\n                if (nutrients[x].name == nutrient) {\n                    return (nutrients[x].measures[0].value);\n                }\n            }\n        };\n        function getGrams(nutrients) {\n            return nutrients[0].measures[0].eqv;\n        }\n\n        if (!ndbno) {\n            reject('too small')\n        }\n\n        axios.get(url2).then(response2 => {\n\n            const nutrients = response2.data.foods[0].food.nutrients;\n\n            if (response2.data.foods[0].food.ing) {\n                var ingredients = response2.data.foods[0].food.ing.desc;\n            }\n            else {\n                var ingredients = 'They are Secret!';\n            }\n\n            const food = {\n                ingredients: ingredients,\n                calories: nutriSearch(nutrients, 'Energy'),\n                sodium: nutriSearch(nutrients, 'Sodium, Na'),\n                totalFat: nutriSearch(nutrients, 'Total lipid (fat)'),\n                transFat: nutriSearch(nutrients, 'Fatty acids, total trans'),\n                saturatedFat: nutriSearch(nutrients, 'Fatty acids, total saturated'),\n                sugar: nutriSearch(nutrients, 'Sugars, total'),\n                cholesterol: nutriSearch(nutrients, 'Cholesterol'),\n                protein: nutriSearch(nutrients, 'Protein'),\n                fiber: nutriSearch(nutrients, 'Fiber, total dietary'),\n                carbs: nutriSearch(nutrients, 'Carbohydrate, by difference'),\n                portion: getGrams(nutrients),\n                name: response2.data.foods[0].food.desc.name\n            }\n            resolve(food);\n        }).catch(err =>\n            reject(err)\n        );\n    });\n}\n"]}