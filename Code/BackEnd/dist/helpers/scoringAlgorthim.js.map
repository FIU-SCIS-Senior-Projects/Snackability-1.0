{"version":3,"sources":["../../server/helpers/scoringAlgorthim.js"],"names":["ingredientJSON","require","scoring","nutrients","ingredients","portion","processed","calories","totalFat","totalfat","saturatedFat","saturatedfat","transFat","transfat","sodium","sugar","score","ingScore","processIngredients","calScore","processCalories","fatScore","processFat","satScore","processSat","tranScore","processTrans","sodiumScore","processSodium","sugarScore","processSugar","processedScore","console","log","feedback","processFeedBack","processFirstIngredient","ingredient","regex","replace","toLowerCase","split","result","scoringFactor","percentOfCaloriesFromFat","satFat","tansFat","sugarByWeight"],"mappings":"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","file":"scoringAlgorthim.js","sourcesContent":["var ingredientJSON = require('./ingredients.json');\nconst scoring = (nutrients, ingredients, portion, processed) => {\n\n    const calories = nutrients.calories;\n    const totalFat = nutrients.totalfat;\n    const saturatedFat = nutrients.saturatedfat;\n    const transFat = nutrients.transfat;\n    const sodium = nutrients.sodium;\n    const sugar = nutrients.sugar;\n\n    let score = 0;\n\n    const ingScore = processIngredients(ingredients);\n    const calScore = processCalories(calories);\n    const fatScore = processFat(totalFat, calories);\n    const satScore = processSat(saturatedFat, calories);\n    const tranScore = processTrans(transFat, calories);\n    const sodiumScore = processSodium(sodium);\n    const sugarScore = processSugar(sugar, portion);\n\n    let processedScore = 0;\n    console.log('this is the processed score'  + processed)\n\n    if (processed === 'not set') {\n        console.log('1')\n        processedScore = 0;\n    }\n    else if (processed === 'true') {\n        processedScore = -1;\n    }\n    else if (processed==='false') {\n        processedScore = 1;\n    }\n    else if (processed != 'null' && processed) {\n        console.log('4')\n        processedScore = 0;\n    }\n\n\n    console.log(`ingScore:${ingScore}\n                 calScore:${calScore}\n                 fatScore:${fatScore}\n                 satScore:${satScore}\n                 tranScore:${tranScore}\n                 sodiumScore:${sodiumScore}\n                 sugarScore:${sugarScore}\n                 processedScore:${processedScore}\n                `)\n    score =\n        ingScore +\n        calScore +\n        fatScore +\n        satScore +\n        tranScore +\n        sodiumScore +\n        sugarScore +\n        processedScore;\n\n    const feedback = processFeedBack(score);\n\n    return { score, feedback, };\n\n}\n\n\nconst processIngredients = (ingredients) => {\n\n\n    const processFirstIngredient = (ingredient) => {\n        //regex to break down to first ingredient and set to lower case \n        var regex = ingredient.replace(/\\s+/g, '').toLowerCase();\n        regex = regex.split(/[^A-Za-z]/)\n        //we only want first ingredient \n        regex = regex[0];\n        console.log(regex);\n        //formating for comparison \n        \n        console.log('formatted first ingredient: ' + regex);\n        //grab the value from the json if exists\n        if (ingredientJSON[regex]) {\n            ingredient = ingredientJSON[regex];\n        } else {\n            ingredient = 'other'\n        }\n        switch (ingredient) {\n            case 'dairy':\n                return 2\n            case 'wholegrains':\n                return 2\n            case 'vegtables':\n                return 2\n            case 'fruits':\n                return 2\n            case 'proteins':\n                return 2\n            case 'other':\n                return 0\n            case 'They are Secret!':\n                return 0\n            default:\n                return 0\n        }\n    }\n\n\n    switch (ingredients) {\n        case 'dairy':\n            return 2\n        case 'whole grain':\n            return 2\n        case 'vegetable':\n            return 2\n        case 'fruit':\n            return 2\n        case 'protein':\n            return 2\n        case 'other':\n            return 0\n        case 'They are Secret!':\n            return 0\n        default:\n            const result = processFirstIngredient(ingredients)\n            return result\n    }\n\n\n}\n\nconst processCalories = (calories) => {\n    var scoringFactor;\n    switch (true) {\n        case calories <= 50:\n            scoringFactor = 2;\n            return scoringFactor\n        case calories > 50 && calories <= 100:\n            scoringFactor = 1.5;\n            return scoringFactor\n        case calories > 100 && calories <= 150:\n            scoringFactor = 1;\n            return scoringFactor\n\n        case calories > 150 && calories <= 220:\n            scoringFactor = .5;\n            return scoringFactor\n\n        case calories > 220:\n            scoringFactor = 0;\n            return scoringFactor\n        default:\n            return 0\n\n    }\n\n}\n\n//takes in fat calories. USDA provide fat grams must be converted to kcals!\nconst processFat = (totalFat, calories) => {\n    const percentOfCaloriesFromFat = totalFat / calories;\n\n    var scoringFactor;\n\n    switch (true) {\n        case percentOfCaloriesFromFat <= .2:\n            scoringFactor = 1;\n            return scoringFactor\n\n        case percentOfCaloriesFromFat > .2 && percentOfCaloriesFromFat <= .35:\n            scoringFactor = .5;\n            return scoringFactor\n\n        default:\n            return 0;\n    }\n\n}\n\n//takes in fat calories. USDA provides #satfat grams must be converted to kcals!\nconst processSat = (satFat, calories) => {\n    var scoringFactor;\n    console.log(`calories:${calories}`);\n    console.log(`satFat:${satFat}`);\n    const percentOfCaloriesFromFat = satFat * 9 / calories;\n    console.log(`\\n percentOfCaloriesFromSatFat: ${percentOfCaloriesFromFat}\\n`)\n    switch (true) {\n        case percentOfCaloriesFromFat <= .05:\n            scoringFactor = 1;\n            return scoringFactor\n        case percentOfCaloriesFromFat > .05 && percentOfCaloriesFromFat <= .10:\n            scoringFactor = .5;\n            return scoringFactor\n        default:\n            return 0;\n    }\n}\n\n//takes in the transfat g and retrns relevant score depending on quantity \nconst processTrans = (tansFat) => {\n    console.log(`tansFat:${tansFat}`)\n    var scoringFactor;\n    if (tansFat === 0) {\n        scoringFactor = 1;\n        return scoringFactor;\n    }\n    else {\n        scoringFactor = 0;\n        return scoringFactor;\n    }\n}\n\nconst processSodium = (sodium) => {\n    var scoringFactor;\n    switch (true) {\n        case (sodium <= 140):\n            scoringFactor = 1;\n            return scoringFactor;\n        case (sodium > 140 && sodium <= 170):\n            scoringFactor = 0.5;\n            return scoringFactor;\n        case (sodium > 170 && sodium <= 200):\n            scoringFactor = 0.25;\n            return scoringFactor;\n        default:\n            scoringFactor = 0;\n            return scoringFactor;\n    }\n\n}\nconst processSugar = (sugar, portion) => {\n    const sugarByWeight = sugar / portion;\n    var scoringFactor;\n\n    switch (true) {\n        case (sugarByWeight < .15):\n            scoringFactor = 2;\n            return scoringFactor;\n        case (.15 >= sugarByWeight && sugarByWeight < .20):\n            scoringFactor = 1.5;\n            return scoringFactor;\n        case (sugarByWeight >= .20 && sugarByWeight < .25):\n            scoringFactor = 1.0;\n            return scoringFactor;\n        case (sugarByWeight >= .25 && sugarByWeight < .35):\n            scoringFactor = .5;\n            return scoringFactor;\n        default:\n            scoringFactor = 0;\n            return scoringFactor;\n    }\n\n}\n\nconst processFeedBack = (score) => {\n    let result\n    switch (true) {\n        case score <= -2:\n            result = '😭 ⚠️ WARNING!! ⚠️ This snack is extremely low in nutrients! Do not consume! ';\n            return result\n        case score <= -1:\n            result = '😨 This snack is not healthy at all. Ditch this snack';\n            return result\n        case score > -1 && score < 6:\n            result = '😩 This snack is not healthy, try choosing a healthier option.';\n            return result\n        case score >= 6 && score < 8:\n            result = '😏 This snack is somewhat healthy, but could be better.';\n            return result\n        case score >= 8 && score < 10:\n            result = '🙂 Good job! This snack is healthy!!';\n            return result\n        default:\n            result = '😄 PERFECT score! This snack is very healthy!!';\n            return result\n    }\n\n}\n\n\nexport default scoring;"]}