{"version":3,"sources":["../../server/controllers/snackController.js"],"names":["simpleSearch","localRender","usdaRender","req","res","item","query","snack","toLowerCase","portion","processed","units","extras","console","log","advancedItem","execute","err","results","fields","size","length","slice","then","resolute","final_results","concat","map","element","update","statusCode","setHeader","send","catch","end","precisionRound","number","precision","factor","Math","pow","round","id","itemPortion","newPortion","result","nutrients","calories","totalfat","calories_fat","saturatedfat","saturated_fat","transfat","trans_fat","sodium","sugar","seving_size","Object","keys","forEach","key","score","first_ingredient","final","assign","ndbno","totalFat","saturatedFat","transFat","cholesterol","protein","fiber","carbs","ingredients"],"mappings":";;;;;;;;QAMgBA,Y,GAAAA,Y;QAoFAC,W,GAAAA,W;QA8DAC,U,GAAAA,U;;AAxJhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,SAASF,YAAT,CAAsBG,GAAtB,EAA2BC,GAA3B,EAAgC;AACnC;AACA,QAAMC,OAAQF,IAAIG,KAAJ,CAAUC,KAAX,CAAkBC,WAAlB,EAAb;AACA,QAAMC,UAAUN,IAAIG,KAAJ,CAAUG,OAAV,GAAoBN,IAAIG,KAAJ,CAAUG,OAA9B,GAAwC,KAAxD;AACA,QAAMC,YAAYP,IAAIG,KAAJ,CAAUI,SAAV,GAAsBP,IAAIG,KAAJ,CAAUI,SAAhC,GAA4C,IAA9D;AACA,QAAMC,QAAQR,IAAIG,KAAJ,CAAUK,KAAV,GAAkBR,IAAIG,KAAJ,CAAUK,KAA5B,GAAoC,KAAlD;;AAEA;AACA,QAAIC,SAAS;AACTH,wBADS;AAETC,4BAFS;AAGTC;AAHS,KAAb;AAKAE,YAAQC,GAAR,CAAYF,MAAZ;;AAEA;AACA,QAAMG,qBAAmB,yBAAUV,IAAV,CAAnB,MAAN;AACA,QAAIA,IAAJ,EAAU;AACN,2BAAGW,OAAH,CACI,2GADJ,EAEI,CAACD,YAAD,EAAeA,YAAf,EAA6BA,YAA7B,CAFJ,EAGI,UAAUE,GAAV,EAAeC,OAAf,EAAwBC,MAAxB,EAAgC;AAC5BN,oBAAQC,GAAR,CAAYG,GAAZ;AACA,gBAAIC,OAAJ,EAAa;AACT;AACA,oBAAME,OAAQF,QAAQG,MAAR,IAAkB,EAAnB,GAAyB,EAAzB,GAA8BH,QAAQG,MAAnD;AACAH,0BAAUA,QAAQI,KAAR,CAAc,CAAd,EAAiBF,IAAjB,CAAV;AACH;;AAED,2CAAWf,IAAX,EAAiBkB,IAAjB,CAAsB,UAACC,QAAD,EAAc;AAChC,oBAAIA,QAAJ,EAAc;AACV,wBAAIN,WAAWM,QAAf,EAAyB;AACrB;AACA,4BAAIC,gBAAiBD,SAASF,KAAT,CAAe,CAAf,EAAkB,CAAlB,EAAqBI,MAArB,CAA4BR,QAAQI,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAA5B,CAAD,CACfI,MADe,CACRF,SAASF,KAAT,CAAe,CAAf,EAAkBE,SAASH,MAA3B,EAAmCK,MAAnC,CAA0CR,QAAQI,KAAR,CAAc,CAAd,EAAiBJ,QAAQG,MAAzB,CAA1C,CADQ,CAApB;AAEA;AACAI,wCAAgBA,cAAcE,GAAd,CAAkB,UAAUC,OAAV,EAAmB;AACjD,gCAAIC,sBAAcjB,MAAd,EAAyBgB,OAAzB,CAAJ;AACA,mCAAOC,MAAP;AACH,yBAHe,CAAhB;AAIH,qBATD,MAUK;AACDJ,wCAAgBA,cAAcE,GAAd,CAAkB,UAAUC,OAAV,EAAmB;AACjD,gCAAIC,sBAAcjB,MAAd,EAAyBgB,OAAzB,CAAJ;AACA,mCAAOC,MAAP;AACH,yBAHe,CAAhB;AAIH;AACDzB,wBAAI0B,UAAJ,GAAiB,GAAjB;AACA1B,wBAAI2B,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,2BAAO3B,IAAI4B,IAAJ,CAASP,aAAT,CAAP;AACH,iBApBD,MAqBK;AACD,wBAAIA,iBAAgBP,QAAQS,GAAR,CAAY,UAAUC,OAAV,EAAmB;AAC/C,4BAAIC,sBAAcjB,MAAd,EAAyBgB,OAAzB,CAAJ;AACA,+BAAOC,MAAP;AACH,qBAHmB,CAApB;AAIAzB,wBAAI0B,UAAJ,GAAiB,GAAjB;AACA1B,wBAAI2B,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,2BAAO3B,IAAI4B,IAAJ,CAASP,cAAT,CAAP;AACH;AAEJ,aAhCD,EAgCGQ,KAhCH,CAgCS,UAAChB,GAAD,EAAS;AACdJ,wBAAQC,GAAR,CAAYG,GAAZ;AACAC,0BAAUA,QAAQQ,MAAR,CAAed,MAAf,CAAV;AACAR,oBAAI0B,UAAJ,GAAiB,GAAjB;AACA1B,oBAAI2B,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,uBAAO3B,IAAI4B,IAAJ,CAASd,OAAT,CAAP;AACH,aAtCD;AAuCH,SAlDL;AAoDH,KArDD,MAsDK;AACDd,YAAI0B,UAAJ,GAAiB,GAAjB;AACA1B,YAAI2B,SAAJ,CAAc,cAAd,EAA8B,YAA9B;AACA3B,YAAI8B,GAAJ,CAAQ,eAAR;AACH;AAEJ;;AAED,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AACvC,QAAIC,SAASC,KAAKC,GAAL,CAAS,EAAT,EAAaH,SAAb,CAAb;AACA,WAAOE,KAAKE,KAAL,CAAWL,SAASE,MAApB,IAA8BA,MAArC;AACH;;AAEM,SAASrC,WAAT,CAAqBE,GAArB,EAA0BC,GAA1B,EAA+B;AAClC,QAAMC,OAAOF,IAAIG,KAAJ,CAAUoC,EAAvB;AACA,QAAMC,cAAcxC,IAAIG,KAAJ,CAAUG,OAA9B;AACA,QAAME,QAAQR,IAAIG,KAAJ,CAAUK,KAAxB;;AAEA,QAAIA,SAAS,OAAT,IAAoBgC,eAAe,OAAvC,EAAgD;AAC5C,YAAIC,aAAa,0BAAWjC,KAAX,EAAkBgC,WAAlB,CAAjB;AACH;;AAED,uBAAG3B,OAAH,CACI,kCADJ,EAEI,CAACX,IAAD,CAFJ,EAGI,UAAUY,GAAV,EAAe4B,MAAf,EAAuB1B,MAAvB,EAA+B;AAC3B;AACA0B,iBAASA,OAAO,CAAP,CAAT;AACA,YAAIA,MAAJ,EAAY;AACR,gBAAIC,YACA;AACIC,0BAAUF,OAAOE,QADrB;AAEIC,0BAAUH,OAAOI,YAFrB;AAGIC,8BAAcL,OAAOM,aAHzB;AAIIC,0BAAUP,OAAOQ,SAJrB;AAKIC,wBAAQT,OAAOS,MALnB;AAMIC,uBAAOV,OAAOU;AANlB,aADJ;AASA,gBAAIX,UAAJ,EAAgB;AACZ/B,wBAAQC,GAAR,CAAY8B,UAAZ;AACA,oBAAIN,SAASM,aAAaC,OAAOW,WAAjC;;AAEA;AACAC,uBAAOC,IAAP,CAAYZ,SAAZ,EAAuBa,OAAvB,CAA+B,UAAUC,GAAV,EAAe;AAC1Cd,8BAAUc,GAAV,KAAkBtB,MAAlB;AACAQ,8BAAUc,GAAV,IAAiBzB,eAAeW,UAAUc,GAAV,CAAf,EAA+B,CAA/B,CAAjB;AACH,iBAHD;;AAKA;AACAf,uBAAOE,QAAP,GAAkBD,UAAUC,QAA5B;AACAF,uBAAOI,YAAP,GAAsBH,UAAUE,QAAhC;AACAH,uBAAOM,aAAP,GAAuBL,UAAUI,YAAjC;AACAL,uBAAOQ,SAAP,GAAmBP,UAAUM,QAA7B;AACAP,uBAAOS,MAAP,GAAgBR,UAAUQ,MAA1B;AACAT,uBAAOU,KAAP,GAAeT,UAAUS,KAAzB;AACAV,uBAAOW,WAAP,GAAqBrB,eAAeS,UAAf,EAA2B,CAA3B,CAArB;AAEH;AACD,gBAAMiB,QAAQ,gCAAQf,SAAR,EAAmBD,OAAOiB,gBAA1B,EAA4CjB,OAAOW,WAAnD,EAAgEX,OAAOnC,SAAvE,CAAd;AACAN,gBAAI0B,UAAJ,GAAiB,GAAjB;;AAEA;AACA,gBAAMiC,QAAQN,OAAOO,MAAP,CAAcnB,MAAd,EAAsBgB,KAAtB,CAAd;AACAzD,gBAAI2B,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,mBAAO3B,IAAI4B,IAAJ,CAAS+B,KAAT,CAAP;AACH;AACD3D,YAAI4B,IAAJ,CAAS,YAAT;AAEH,KA9CL;AAkDH;;AAGM,SAAS9B,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AACjC,QAAMC,OAAOF,IAAIG,KAAJ,CAAU2D,KAAvB;AACA,QAAMtB,cAAcxC,IAAIG,KAAJ,CAAUG,OAA9B;AACA,QAAME,QAAQR,IAAIG,KAAJ,CAAUK,KAAxB;AACA,QAAMD,YAAYP,IAAIG,KAAJ,CAAUI,SAA5B;;AAEAG,YAAQC,GAAR,CAAY6B,WAAZ;AACA9B,YAAQC,GAAR,CAAYH,KAAZ;;AAEA,QAAIA,SAAS,OAAT,IAAoBgC,eAAe,OAAvC,EAAgD;AAC5C,YAAIC,aAAa,0BAAWjC,KAAX,EAAkBgC,WAAlB,CAAjB;AACH;AACD9B,YAAQC,GAAR,CAAY,gBAAgB8B,UAA5B;AACA,yCAAiBvC,IAAjB,EAAuBkB,IAAvB,CAA4B,UAACsB,MAAD,EAAY;AACpChC,gBAAQC,GAAR,CAAY+B,MAAZ;AACA,YAAIA,MAAJ,EAAY;AACR,gBAAIC,YACA;AACIC,0BAAUF,OAAOE,QADrB;AAEI;AACAC,0BAAUH,OAAOqB,QAAP,GAAkB,CAHhC;AAIIhB,8BAAcL,OAAOsB,YAJzB;AAKIf,0BAAUP,OAAOuB,QALrB;AAMId,wBAAQT,OAAOS,MANnB;AAOIC,uBAAOV,OAAOU,KAPlB;AAQIc,6BAAaxB,OAAOwB,WARxB;AASIC,yBAASzB,OAAOyB,OATpB;AAUIC,uBAAO1B,OAAO0B,KAVlB;AAWIC,uBAAO3B,OAAO2B;AAXlB,aADJ;;AAeA,gBAAI5B,UAAJ,EAAgB;;AAEZ,oBAAIN,SAASM,aAAaC,OAAOpC,OAAjC;;AAEAoC,uBAAOpC,OAAP,GAAiB0B,eAAeS,UAAf,EAA2B,CAA3B,CAAjB;AACA/B,wBAAQC,GAAR,CAAY,WAAWwB,MAAvB;AACA;AACAmB,uBAAOC,IAAP,CAAYZ,SAAZ,EAAuBa,OAAvB,CAA+B,UAAUC,GAAV,EAAe;AAC1Cd,8BAAUc,GAAV,KAAkBtB,MAAlB;AACAQ,8BAAUc,GAAV,IAAiBzB,eAAeW,UAAUc,GAAV,CAAf,EAA+B,CAA/B,CAAjB;AACH,iBAHD;AAIA;AACAf,uBAAOE,QAAP,GAAkBD,UAAUC,QAA5B;AACAF,uBAAOqB,QAAP,GAAkBpB,UAAUE,QAA5B;AACAH,uBAAOsB,YAAP,GAAsBrB,UAAUI,YAAhC;AACAL,uBAAOuB,QAAP,GAAkBtB,UAAUM,QAA5B;AACAP,uBAAOS,MAAP,GAAgBR,UAAUQ,MAA1B;AACAT,uBAAOU,KAAP,GAAeT,UAAUS,KAAzB;AACAV,uBAAOwB,WAAP,GAAqBvB,UAAUuB,WAA/B;AACAxB,uBAAOyB,OAAP,GAAiBxB,UAAUwB,OAA3B;AACAzB,uBAAO0B,KAAP,GAAezB,UAAUyB,KAAzB;AACA1B,uBAAO2B,KAAP,GAAe1B,UAAU0B,KAAzB;AACA3B,uBAAOpC,OAAP,GAAiBmC,UAAjB;AACH;;AAED;AACA,gBAAMiB,QAAQ,gCAAQf,SAAR,EAAmBD,OAAO4B,WAA1B,EAAuC5B,OAAOpC,OAA9C,EAAuDC,SAAvD,CAAd;;AAEAN,gBAAI0B,UAAJ,GAAiB,GAAjB;AACA;AACA,gBAAMiC,QAAQN,OAAOO,MAAP,CAAcnB,MAAd,EAAsBgB,KAAtB,CAAd;AACAzD,gBAAI2B,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,mBAAO3B,IAAI4B,IAAJ,CAAS+B,KAAT,CAAP;AACH;AACD3D,YAAI4B,IAAJ,CAAS,YAAT;AAEH,KAtDD;AA2DH","file":"snackController.js","sourcesContent":["import db from '../config/dbConfig';\nimport metaphone from 'metaphone';\nimport scoring from '../helpers/scoringAlgorthim';\nimport conversion from '../helpers/conversion';\nimport { baseSearch, snackSearchNdbno } from '../helpers/searchHelpers';\n\nexport function simpleSearch(req, res) {\n    //leverging template string to prepare input for query\n    const item = (req.query.snack).toLowerCase();\n    const portion = req.query.portion ? req.query.portion : false;\n    const processed = req.query.processed ? req.query.processed : null;\n    const units = req.query.units ? req.query.units : false;\n\n    //extra search params\n    var extras = {\n        portion,\n        processed,\n        units\n    }\n    console.log(extras)\n\n    //metaphone is used for phonetic search\n    const advancedItem = `%${metaphone(item)}%`;\n    if (item) {\n        db.execute(\n            \"SELECT * FROM snack WHERE  product_search LIKE ? OR brand_name_search LIKE ? OR short_name_search LIKE ?;\",\n            [advancedItem, advancedItem, advancedItem],\n            function (err, results, fields) {\n                console.log(err)\n                if (results) {\n                    //number of results from DB we want the top 10\n                    const size = (results.length >= 10) ? 10 : results.length;\n                    results = results.slice(0, size);\n                }\n\n                baseSearch(item).then((resolute) => {\n                    if (resolute) {\n                        if (results && resolute) {\n                            //add local + usda json if both avilable\n                            var final_results = (resolute.slice(0, 5).concat(results.slice(0, 5)))\n                                .concat(resolute.slice(5, resolute.length).concat(results.slice(5, results.length)));\n                            //adding the extra params \n                            final_results = final_results.map(function (element) {\n                                let update = { ...extras, ...element }\n                                return update\n                            });\n                        }\n                        else {\n                            final_results = final_results.map(function (element) {\n                                let update = { ...extras, ...element }\n                                return update\n                            });\n                        }\n                        res.statusCode = 200;\n                        res.setHeader('Content-Type', 'application/json');\n                        return res.send(final_results);\n                    }\n                    else {\n                        let final_results = results.map(function (element) {\n                            let update = { ...extras, ...element }\n                            return update\n                        });\n                        res.statusCode = 200;\n                        res.setHeader('Content-Type', 'application/json');\n                        return res.send(final_results);\n                    }\n\n                }).catch((err) => {\n                    console.log(err);\n                    results = results.concat(extras)\n                    res.statusCode = 200;\n                    res.setHeader('Content-Type', 'application/json');\n                    return res.send(results);\n                })\n            }\n        );\n    }\n    else {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'text/plain');\n        res.end('nothing found');\n    }\n\n}\n\nfunction precisionRound(number, precision) {\n    var factor = Math.pow(10, precision);\n    return Math.round(number * factor) / factor;\n}\n\nexport function localRender(req, res) {\n    const item = req.query.id;\n    const itemPortion = req.query.portion;\n    const units = req.query.units;\n\n    if (units != 'false' && itemPortion != 'false') {\n        var newPortion = conversion(units, itemPortion)\n    }\n\n    db.execute(\n        \"SELECT * FROM snack WHERE id = ?\",\n        [item],\n        function (err, result, fields) {\n            //reult is an array we only want first instance\n            result = result[0];\n            if (result) {\n                var nutrients =\n                    {\n                        calories: result.calories,\n                        totalfat: result.calories_fat,\n                        saturatedfat: result.saturated_fat,\n                        transfat: result.trans_fat,\n                        sodium: result.sodium,\n                        sugar: result.sugar\n                    }\n                if (newPortion) {\n                    console.log(newPortion)\n                    var factor = newPortion / result.seving_size;\n\n                    //icremenr nutrients by factor\n                    Object.keys(nutrients).forEach(function (key) {\n                        nutrients[key] *= factor;\n                        nutrients[key] = precisionRound(nutrients[key], 1)\n                    });\n\n                    //update result\n                    result.calories = nutrients.calories\n                    result.calories_fat = nutrients.totalfat\n                    result.saturated_fat = nutrients.saturatedfat\n                    result.trans_fat = nutrients.transfat\n                    result.sodium = nutrients.sodium\n                    result.sugar = nutrients.sugar\n                    result.seving_size = precisionRound(newPortion, 1);\n\n                }\n                const score = scoring(nutrients, result.first_ingredient, result.seving_size, result.processed);\n                res.statusCode = 200;\n\n                //merges both the score and db result\n                const final = Object.assign(result, score);\n                res.setHeader('Content-Type', 'application/json');\n                return res.send(final);\n            }\n            res.send('no results');\n\n        }\n\n    );\n\n}\n\n\nexport function usdaRender(req, res) {\n    const item = req.query.ndbno;\n    const itemPortion = req.query.portion;\n    const units = req.query.units;\n    const processed = req.query.processed;\n\n    console.log(itemPortion)\n    console.log(units)\n\n    if (units != 'false' && itemPortion != 'false') {\n        var newPortion = conversion(units, itemPortion)\n    }\n    console.log('New Portion' + newPortion)\n    snackSearchNdbno(item).then((result) => {\n        console.log(result)\n        if (result) {\n            var nutrients =\n                {\n                    calories: result.calories,\n                    //converted to calories from fat\n                    totalfat: result.totalFat * 9,\n                    saturatedfat: result.saturatedFat,\n                    transfat: result.transFat,\n                    sodium: result.sodium,\n                    sugar: result.sugar,\n                    cholesterol: result.cholesterol,\n                    protein: result.protein,\n                    fiber: result.fiber,\n                    carbs: result.carbs,\n                }\n\n            if (newPortion) {\n\n                var factor = newPortion / result.portion;\n\n                result.portion = precisionRound(newPortion, 1);\n                console.log('factor' + factor)\n                //icremenr nutrients by factor\n                Object.keys(nutrients).forEach(function (key) {\n                    nutrients[key] *= factor;\n                    nutrients[key] = precisionRound(nutrients[key], 1)\n                });\n                //update result\n                result.calories = nutrients.calories\n                result.totalFat = nutrients.totalfat\n                result.saturatedFat = nutrients.saturatedfat\n                result.transFat = nutrients.transfat\n                result.sodium = nutrients.sodium\n                result.sugar = nutrients.sugar\n                result.cholesterol = nutrients.cholesterol\n                result.protein = nutrients.protein\n                result.fiber = nutrients.fiber\n                result.carbs = nutrients.carbs\n                result.portion = newPortion;\n            }\n\n            // const firstIngredient=ingredients;\n            const score = scoring(nutrients, result.ingredients, result.portion, processed);\n\n            res.statusCode = 200;\n            //merges both the score and api result\n            const final = Object.assign(result, score);\n            res.setHeader('Content-Type', 'application/json');\n            return res.send(final);\n        }\n        res.send('no results');\n\n    })\n\n\n\n\n}\n\n\n"]}